목적 결정 -> 데이터 수집 -> 데이터 전처리 -> 머신러닝 선택 및 학습 ->평가

[데이터 전처리]
정규화
   0~1
   표준편차가 0, 분포 1

표준화 - 평균을 0, 분산을 1로 한다.
정규화 - MinMaxScaler 모든 특성의 값이 0~1사이에 위치하도록 한다.
   - 딥러닝 입력 RGB 0~255 -> 0~1

RobustScaler - 평균과 분산 대신에 중간값, 사분위값을 사용.
Normalizer - 길이가 1이 되도록 데이터 포인트를 조정

데이터 범위를 조정 - 스케일링
   - 어떤 값이 너무 커져서 잠재적 수치 불안정성을 방지.

라벨 인코딩
- 문자열을 숫자로 변경
- 범주형 데이터를 숫자로 변경 (머신러닝 모델의 입력으로 사용하기 위해)

원핫 인코딩
   lightgbm, xgboost, catboost 원핫 인코딩을 하지 않아도 된다.
   0~1을 갖는 벡터로 변경
   텍스트 데이터 벡터화 시킬 때 사용된다.

구간 분할
   연속형 데이터에서 가장 강력한 선형 모델을 만드는 방법.
   1, 2, 3, 4, 5, 6, 7, 8, 9, 123, 15, 56, 723, 256, 1654, 
   -> 0 50 100 150 200 250 1000 2000 5000
   -> 가까운 쪽에 맵핑 시킴
   -> 0 0 0 0 0 0 0 0 0 0 0 0 100 0 50 1000 ...

비선형 변환
   -> 정규 분포


평가 지표
-회귀
   MAE - 평균 절대 오차 : |실제값-예측값|의 합의 평균
   MSE - 평균 제곱 오차 : (실제값-예측값)*(실제값-예측값) 데이터 행별로 더한 후, 평균
   RMSE - 평균 제곱근 오차 : MSE에 루트를 씌운 것
   RMSLE : RMSE를 구하는 것과 같다. 단, (log(오차+1) - log(실제값+1))
   MAPE - 평균 절대 오차 비율

-분류
   정확도

   f1-score => 정밀도, 민감도의 조화평균

   혼동행렬 or 오차행렬
   - 이진분류일때, 앞의 글자는 정확하게 예측을 했는가(T, F)
     뒤의 글자는 예측값을 무엇으로 했는가 Y(1) : P, N(0) : N

   - 정확도
       - 전체 샘플중에 몇개를 맞혔을까? (TP+TN)/(TP+FN+FP+TN)

       (정밀도와 민감도는 정확하게 예측한 확률을 구한다.)
   - 정밀도
       - 예측 Y중에 실제 Y를 정확하게 예측한 확률 TP/(TP+FP)

   - 민감도 or 재현율, Recall, TPRate
       - 실제 Y중에 정확하게 예측한 확률
       - 실제 Y값을 얼마나 재현했는가? TP/(TP+FN)

   - 특이도
       - 실제 N중에 실제 N을 정확하게 예측한 확률 TN  / (FP + TN)

   - FPRate
       - 실제 N(거짓) 중에서 예측이 틀린 경우 FP / (FP + TN)

ROC 커브
- Y축이 민감도
- X축이 1-특이도(FPRate)

- ROC 커브 곡선 아래 영역 - AUC

-AUC, ROC의 곡선의 아래 영역을 의미한다.
 AUC 0~1사이이다. 그리고 값이 클수록 좋다.

-ROC 커브가 어느쪽으로 가면 좋은가?
   - 왼쪽 위로 올라가는 것이 성능이 좋아진다.

-정확도, 정밀도, 민감도, 특이도, FPRate
-정밀도와 민감도(맞힌 비율)
   -정밀도(예측 Y중에), 민감도(실제 Y중에 - 재현율, TPRate)
   -하나가 높아지면 하난가 낮아짐
   -f-score 정밀도와 민감도의 조화 평균

